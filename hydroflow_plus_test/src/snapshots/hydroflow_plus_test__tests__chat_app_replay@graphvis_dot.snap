---
source: hydroflow_plus_test/src/lib.rs
expression: "chat_server.meta_graph().unwrap().to_dot(&Default::default())"
---
digraph {
    node [fontname="Monaco,Menlo,Consolas,&quot;Droid Sans Mono&quot;,Inconsolata,&quot;Courier New&quot;,monospace", style=filled];
    edge [fontname="Monaco,Menlo,Consolas,&quot;Droid Sans Mono&quot;,Inconsolata,&quot;Courier New&quot;,monospace"];
    n1v1 [label="(n1v1) source_stream(users_stream)", shape=invhouse, fillcolor="#88aaff"]
    n2v1 [label="(n2v1) source_stream(messages)", shape=invhouse, fillcolor="#88aaff"]
    n3v1 [label="(n3v1) map({\l    use crate::__staged::*;\l    |s| s.to_uppercase()\l})\l", shape=invhouse, fillcolor="#88aaff"]
    n4v1 [label="(n4v1) cross_join::<'static, 'static>()", shape=invhouse, fillcolor="#88aaff"]
    n5v1 [label="(n5v1) multiset_delta()", shape=invhouse, fillcolor="#88aaff"]
    n6v1 [label="(n6v1) for_each({\l    use crate::__staged::*;\l    let output = output;\l    |t| {\l        output.send(t).unwrap();\l    }\l})\l", shape=house, fillcolor="#ffff88"]
    n2v1 -> n3v1
    n1v1 -> n4v1 [label="0"]
    n3v1 -> n4v1 [label="1"]
    n4v1 -> n5v1
    n5v1 -> n6v1
    subgraph "cluster n1v1" {
        fillcolor="#dddddd"
        style=filled
        label = "sg_1v1\nstratum 0"
        n1v1
        n2v1
        n3v1
        n4v1
        n5v1
        n6v1
        subgraph "cluster_sg_1v1_var_stream_0" {
            label="var stream_0"
            n1v1
        }
        subgraph "cluster_sg_1v1_var_stream_1" {
            label="var stream_1"
            n2v1
        }
        subgraph "cluster_sg_1v1_var_stream_2" {
            label="var stream_2"
            n3v1
        }
        subgraph "cluster_sg_1v1_var_stream_3" {
            label="var stream_3"
            n4v1
        }
        subgraph "cluster_sg_1v1_var_stream_4" {
            label="var stream_4"
            n5v1
        }
    }
}
