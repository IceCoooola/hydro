---
source: hydroflow_plus_test/src/cluster.rs
expression: builder.extract().ir()
---
[
    ForEach {
        f: { use crate :: __staged :: cluster :: * ; | n | println ! ("cluster received: {:?}" , n) },
        input: Network {
            to_location: 0,
            serialize_pipeline: Some(
                Operator(
                    Operator {
                        path: "map",
                        args: [
                            "| (id , data) | { (id , hydroflow_plus :: runtime_support :: bincode :: serialize :: < i32 > (& data) . unwrap () . into ()) }",
                        ],
                    },
                ),
            ),
            sink_expr: null,
            source_expr: null,
            deserialize_pipeline: Some(
                Operator(
                    Operator {
                        path: "map",
                        args: [
                            "| res | { let (id , b) = res . unwrap () ; (id , hydroflow_plus :: runtime_support :: bincode :: deserialize :: < i32 > (& b) . unwrap ()) }",
                        ],
                    },
                ),
            ),
            input: CrossProduct(
                Persist(
                    Map {
                        f: { use hydroflow_plus :: __staged :: stream :: * ; | d | d . clone () },
                        input: Source {
                            source: Iter(
                                { use hydroflow_plus_cli_integration :: __staged :: deploy :: * ; panic ! () },
                            ),
                            location_id: 0,
                        },
                    },
                ),
                Source {
                    source: Iter(
                        { use crate :: __staged :: cluster :: * ; 0 .. 2 },
                    ),
                    location_id: 0,
                },
            ),
        },
    },
]
