---
source: hydroflow_plus_test/src/cluster.rs
expression: built.ir()
---
[
    ForEach {
        f: { use crate :: __staged :: cluster :: * ; | (string , count) | println ! ("{}: {}" , string , count) },
        input: ReduceKeyed {
            f: { use crate :: __staged :: cluster :: * ; | total , count | * total += count },
            input: Persist(
                Map {
                    f: { use hydroflow_plus :: __staged :: stream :: * ; | (_ , b) | b },
                    input: Network {
                        to_location: 0,
                        serialize_pipeline: Some(
                            Operator(
                                Operator {
                                    path: "map",
                                    args: [
                                        "| data | { hydroflow_plus :: runtime_support :: bincode :: serialize :: < (std :: string :: String , i32) > (& data) . unwrap () . into () }",
                                    ],
                                },
                            ),
                        ),
                        sink_expr: { use hydroflow_plus_cli_integration :: __staged :: runtime :: * ; let port = "port_1" ; let self_cli = FAKE ; { self_cli . port (port) . connect_local_blocking :: < ConnectedDirect > () . into_sink () } },
                        source_expr: { use hydroflow_plus_cli_integration :: __staged :: runtime :: * ; let port = "port_1" ; let self_cli = FAKE ; { self_cli . port (port) . connect_local_blocking :: < ConnectedTagged < ConnectedDirect > > () . into_source () } },
                        deserialize_pipeline: Some(
                            Operator(
                                Operator {
                                    path: "map",
                                    args: [
                                        "| res | { let (id , b) = res . unwrap () ; (id , hydroflow_plus :: runtime_support :: bincode :: deserialize :: < (std :: string :: String , i32) > (& b) . unwrap ()) }",
                                    ],
                                },
                            ),
                        ),
                        input: Inspect {
                            f: { use crate :: __staged :: cluster :: * ; | (string , count) | println ! ("partition count: {} - {}" , string , count) },
                            input: FoldKeyed {
                                init: { use crate :: __staged :: cluster :: * ; | | 0 },
                                acc: { use crate :: __staged :: cluster :: * ; | count , _ | * count += 1 },
                                input: Map {
                                    f: { use crate :: __staged :: cluster :: * ; | string | (string , ()) },
                                    input: Network {
                                        to_location: 1,
                                        serialize_pipeline: Some(
                                            Operator(
                                                Operator {
                                                    path: "map",
                                                    args: [
                                                        "| (id , data) | { (id , hydroflow_plus :: runtime_support :: bincode :: serialize :: < std :: string :: String > (& data) . unwrap () . into ()) }",
                                                    ],
                                                },
                                            ),
                                        ),
                                        sink_expr: { use hydroflow_plus_cli_integration :: __staged :: runtime :: * ; let port = "port_0" ; let self_cli = FAKE ; { self_cli . port (port) . connect_local_blocking :: < ConnectedDemux < ConnectedDirect > > () . into_sink () } },
                                        source_expr: { use hydroflow_plus_cli_integration :: __staged :: runtime :: * ; let port = "port_0" ; let self_cli = FAKE ; { self_cli . port (port) . connect_local_blocking :: < ConnectedDirect > () . into_source () } },
                                        deserialize_pipeline: Some(
                                            Operator(
                                                Operator {
                                                    path: "map",
                                                    args: [
                                                        "| res | { hydroflow_plus :: runtime_support :: bincode :: deserialize :: < std :: string :: String > (& res . unwrap ()) . unwrap () }",
                                                    ],
                                                },
                                            ),
                                        ),
                                        input: Map {
                                            f: { use crate :: __staged :: cluster :: * ; let all_ids_vec = { use hydroflow_plus_cli_integration :: __staged :: runtime :: * ; let cli = FAKE ; let self_id = 1usize ; cli . meta . clusters . get (& self_id) . unwrap () } ; | (i , w) | ((i % all_ids_vec . len ()) as u32 , w) },
                                            input: Enumerate(
                                                Map {
                                                    f: { use crate :: __staged :: cluster :: * ; | s | s . to_string () },
                                                    input: Source {
                                                        source: Iter(
                                                            { use crate :: __staged :: cluster :: * ; vec ! ["abc" , "abc" , "xyz" , "abc"] },
                                                        ),
                                                        location_id: 0,
                                                    },
                                                },
                                            ),
                                        },
                                    },
                                },
                            },
                        },
                    },
                },
            ),
        },
    },
]
