---
source: hydroflow_plus_test/src/cluster.rs
expression: ir.surface_syntax_string()
---
1v1 = source_stream ({ use hydroflow_plus_cli_integration :: __staged :: runtime :: * ; let port = "port_0" ; let self_cli = FAKE ; { self_cli . port (port) . connect_local_blocking :: < ConnectedTagged < ConnectedDirect > > () . into_source () } });
2v1 = map (| res | { let (id , b) = res . unwrap () ; (id , hydroflow_plus :: runtime_support :: bincode :: deserialize :: < (u64 , u64) > (& b) . unwrap ()) });
3v1 = map ({ use hydroflow_plus :: __staged :: stream :: * ; | (_ , b) | b });
4v1 = reduce :: < 'static > ({ use crate :: __staged :: cluster :: * ; | (inside , total) , (inside_batch , total_batch) | { * inside += inside_batch ; * total += total_batch ; } });
5v1 = source_interval ({ use crate :: __staged :: cluster :: * ; Duration :: from_secs (1) });
6v1 = cross_join :: < 'tick , 'tick > ();
7v1 = map ({ use hydroflow_plus :: __staged :: stream :: * ; | (a , _) | a });
8v1 = for_each ({ use crate :: __staged :: cluster :: * ; | (inside , total) | { println ! ("pi: {} ({} trials)" , 4.0 * inside as f64 / total as f64 , total) ; } });

1v1 -> 2v1;
2v1 -> 3v1;
3v1 -> 4v1;
4v1 -> 6v1;
5v1 -> 6v1;
6v1 -> 7v1;
7v1 -> 8v1;
