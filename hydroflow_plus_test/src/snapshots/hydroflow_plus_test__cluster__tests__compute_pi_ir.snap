---
source: hydroflow_plus_test/src/cluster.rs
expression: built.ir()
---
[
    ForEach {
        f: { use crate :: __staged :: cluster :: * ; | (inside , total) | { println ! ("pi: {} ({} trials)" , 4.0 * inside as f64 / total as f64 , total) ; } },
        input: Map {
            f: { use hydroflow_plus :: __staged :: stream :: * ; | (a , _) | a },
            input: CrossProduct(
                Reduce {
                    f: { use crate :: __staged :: cluster :: * ; | (inside , total) , (inside_batch , total_batch) | { * inside += inside_batch ; * total += total_batch ; } },
                    input: Persist(
                        Map {
                            f: { use hydroflow_plus :: __staged :: stream :: * ; | (_ , b) | b },
                            input: Network {
                                to_location: 1,
                                serialize_pipeline: Some(
                                    Operator(
                                        Operator {
                                            path: "map",
                                            args: [
                                                "| data | { hydroflow_plus :: runtime_support :: bincode :: serialize :: < (u64 , u64) > (& data) . unwrap () . into () }",
                                            ],
                                        },
                                    ),
                                ),
                                sink_expr: { use hydroflow_plus_cli_integration :: __staged :: runtime :: * ; let port = "port_0" ; let self_cli = FAKE ; { self_cli . port (port) . connect_local_blocking :: < ConnectedDirect > () . into_sink () } },
                                source_expr: { use hydroflow_plus_cli_integration :: __staged :: runtime :: * ; let port = "port_0" ; let self_cli = FAKE ; { self_cli . port (port) . connect_local_blocking :: < ConnectedTagged < ConnectedDirect > > () . into_source () } },
                                deserialize_pipeline: Some(
                                    Operator(
                                        Operator {
                                            path: "map",
                                            args: [
                                                "| res | { let (id , b) = res . unwrap () ; (id , hydroflow_plus :: runtime_support :: bincode :: deserialize :: < (u64 , u64) > (& b) . unwrap ()) }",
                                            ],
                                        },
                                    ),
                                ),
                                input: Fold {
                                    init: { use crate :: __staged :: cluster :: * ; | | (0u64 , 0u64) },
                                    acc: { use crate :: __staged :: cluster :: * ; | (inside , total) , sample_inside | { if sample_inside { * inside += 1 ; } * total += 1 ; } },
                                    input: Map {
                                        f: { use crate :: __staged :: cluster :: * ; | (x , y) | x * x + y * y < 1.0 },
                                        input: Map {
                                            f: { use crate :: __staged :: cluster :: * ; | _ | rand :: random :: < (f64 , f64) > () },
                                            input: Map {
                                                f: { use hydroflow_plus :: __staged :: builder :: * ; | _ | () },
                                                input: FlatMap {
                                                    f: { use hydroflow_plus :: __staged :: builder :: * ; let batch_size = { use crate :: __staged :: cluster :: * ; let batch_size = FAKE ; * batch_size } ; move | _ | 0 .. batch_size },
                                                    input: Source {
                                                        source: Spin,
                                                        location_id: 0,
                                                    },
                                                },
                                            },
                                        },
                                    },
                                },
                            },
                        },
                    ),
                },
                Source {
                    source: Interval(
                        { use crate :: __staged :: cluster :: * ; Duration :: from_secs (1) },
                    ),
                    location_id: 1,
                },
            ),
        },
    },
]
