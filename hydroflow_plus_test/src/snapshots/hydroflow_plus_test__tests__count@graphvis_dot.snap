---
source: hydroflow_plus_test/src/lib.rs
expression: "count.meta_graph().unwrap().to_dot(&Default::default())"
---
digraph {
    node [fontname="Monaco,Menlo,Consolas,&quot;Droid Sans Mono&quot;,Inconsolata,&quot;Courier New&quot;,monospace", style=filled];
    edge [fontname="Monaco,Menlo,Consolas,&quot;Droid Sans Mono&quot;,Inconsolata,&quot;Courier New&quot;,monospace"];
    n1v1 [label="(n1v1) source_stream(input_stream)", shape=invhouse, fillcolor="#88aaff"]
    n2v1 [label="(n2v1) map({\l    use crate::__staged::*;\l    |_| 1\l})\l", shape=invhouse, fillcolor="#88aaff"]
    n3v1 [label="(n3v1) fold::<\l    'tick,\l>(\l    {\l        use crate::__staged::*;\l        || 0\l    },\l    {\l        use crate::__staged::*;\l        |a, b| *a += b\l    },\l)\l", shape=invhouse, fillcolor="#88aaff"]
    n4v1 [label="(n4v1) for_each({\l    use crate::__staged::*;\l    let output = output;\l    |v| {\l        output.send(v).unwrap();\l    }\l})\l", shape=house, fillcolor="#ffff88"]
    n5v1 [label="(n5v1) handoff", shape=parallelogram, fillcolor="#ddddff"]
    n1v1 -> n2v1
    n2v1 -> n5v1
    n3v1 -> n4v1
    n5v1 -> n3v1 [color=red]
    subgraph "cluster n1v1" {
        fillcolor="#dddddd"
        style=filled
        label = "sg_1v1\nstratum 0"
        n1v1
        n2v1
        subgraph "cluster_sg_1v1_var_stream_0" {
            label="var stream_0"
            n1v1
        }
        subgraph "cluster_sg_1v1_var_stream_1" {
            label="var stream_1"
            n2v1
        }
    }
    subgraph "cluster n2v1" {
        fillcolor="#dddddd"
        style=filled
        label = "sg_2v1\nstratum 1"
        n3v1
        n4v1
        subgraph "cluster_sg_2v1_var_stream_2" {
            label="var stream_2"
            n3v1
        }
    }
}

