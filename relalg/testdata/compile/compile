compile
(values [[1 2 3]])
----
----
fn main() {
    let __values_1 = vec![
        vec![
            ScalarExpr::Literal(Datum::Int(1i64)).eval(&Vec::new()),
            ScalarExpr::Literal(Datum::Int(2i64)).eval(&Vec::new()),
            ScalarExpr::Literal(Datum::Int(3i64)).eval(&Vec::new()),
        ],
    ]
        .into_iter();
    for row in __values_1 {
        println!("{:?}", row);
    }
}

----
----

compile
(filter [(= @0 1)]
    (values [[1 2 3]]))
----
----
fn main() {
    let __values_2 = vec![
        vec![
            ScalarExpr::Literal(Datum::Int(1i64)).eval(&Vec::new()),
            ScalarExpr::Literal(Datum::Int(2i64)).eval(&Vec::new()),
            ScalarExpr::Literal(Datum::Int(3i64)).eval(&Vec::new()),
        ],
    ]
        .into_iter();
    let __filter_1 = __values_2
        .filter(|row| {
            ScalarExpr::Eq(
                    Box::new(ScalarExpr::ColRef(0usize)),
                    Box::new(ScalarExpr::Literal(Datum::Int(1i64))),
                )
                .eval(row)
                .is_true()
        });
    for row in __filter_1 {
        println!("{:?}", row);
    }
}

----
----

compile
(filter [(= @0 1) (= 5 (+ @1 @2))]
    (values [[1 2 3] [4 5 6]]))
----
----
fn main() {
    let __values_2 = vec![
        vec![
            ScalarExpr::Literal(Datum::Int(1i64)).eval(&Vec::new()),
            ScalarExpr::Literal(Datum::Int(2i64)).eval(&Vec::new()),
            ScalarExpr::Literal(Datum::Int(3i64)).eval(&Vec::new()),
        ],
        vec![
            ScalarExpr::Literal(Datum::Int(4i64)).eval(&Vec::new()),
            ScalarExpr::Literal(Datum::Int(5i64)).eval(&Vec::new()),
            ScalarExpr::Literal(Datum::Int(6i64)).eval(&Vec::new()),
        ],
    ]
        .into_iter();
    let __filter_1 = __values_2
        .filter(|row| {
            ScalarExpr::Eq(
                    Box::new(ScalarExpr::ColRef(0usize)),
                    Box::new(ScalarExpr::Literal(Datum::Int(1i64))),
                )
                .eval(row)
                .is_true()
                && ScalarExpr::Eq(
                        Box::new(ScalarExpr::Literal(Datum::Int(5i64))),
                        Box::new(
                            ScalarExpr::Plus(
                                Box::new(ScalarExpr::ColRef(1usize)),
                                Box::new(ScalarExpr::ColRef(2usize)),
                            ),
                        ),
                    )
                    .eval(row)
                    .is_true()
        });
    for row in __filter_1 {
        println!("{:?}", row);
    }
}

----
----

compile
(project [(+ @0 1) (+ 5 (+ @1 @2))]
    (values [[1 2 3] [4 5 6]]))
----
----
fn main() {
    let __values_2 = vec![
        vec![
            ScalarExpr::Literal(Datum::Int(1i64)).eval(&Vec::new()),
            ScalarExpr::Literal(Datum::Int(2i64)).eval(&Vec::new()),
            ScalarExpr::Literal(Datum::Int(3i64)).eval(&Vec::new()),
        ],
        vec![
            ScalarExpr::Literal(Datum::Int(4i64)).eval(&Vec::new()),
            ScalarExpr::Literal(Datum::Int(5i64)).eval(&Vec::new()),
            ScalarExpr::Literal(Datum::Int(6i64)).eval(&Vec::new()),
        ],
    ]
        .into_iter();
    let __project_1 = __values_2
        .map(|row| {
            vec![
                ScalarExpr::Plus(
                        Box::new(ScalarExpr::ColRef(0usize)),
                        Box::new(ScalarExpr::Literal(Datum::Int(1i64))),
                    )
                    .eval(&row),
                ScalarExpr::Plus(
                        Box::new(ScalarExpr::Literal(Datum::Int(5i64))),
                        Box::new(
                            ScalarExpr::Plus(
                                Box::new(ScalarExpr::ColRef(1usize)),
                                Box::new(ScalarExpr::ColRef(2usize)),
                            ),
                        ),
                    )
                    .eval(&row),
            ]
        });
    for row in __project_1 {
        println!("{:?}", row);
    }
}

----
----
